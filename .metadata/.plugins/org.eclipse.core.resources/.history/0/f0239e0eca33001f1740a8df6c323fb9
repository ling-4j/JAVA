package TileProduct;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.StringReader;
import java.util.*;

import myio.MyStream;



public class TileManagerImpl implements TileManager,Serializable {
	private static final long serialVersionUID = 1L;
	public List<Tile> list;
	private static final String FILE_NAME = "Tile.bin";
	public TileManagerImpl() {
		list = new ArrayList<Tile>();
		loadData();
	}
//	public TileManagerImpl(int n) {
//		this.list = new ArrayList<Tile>(n);
//		for(int i=0; i<this.list.size(); i++) {
//			this.list.get(i).setProduct_id(i);
//		}
//	}
	
	@Override
	public boolean addTile(Tile t) {
		// TODO Auto-generated method stub
		boolean find = false;
		for(Tile item: this.list) {
			if(item.getProduct_id() == t.getProduct_id()) {
				find = true;
				break;
			}
			
		}
		if(!find) {
			this.list.add(t);
			this.exportFile();
			return true;
		} else {
			//Tawng so luong trong kho
			return false;
		}
	}

	@Override
	public boolean editTile(Tile t) {
		// TODO Auto-generated method stub
		boolean find = false;
		for(Tile item: this.list) {
			if(item.getProduct_id() == t.getProduct_id()) {
				item.setProduct_name(t.getProduct_name());
				item.setProduct_price(t.isProduct_price());
				item.setProduct_total(t.getProduct_total());
				item.setTile_brand(t.getTile_brand());
				item.setTile_size_length(t.getTile_size_length());
				item.setTile_size_width(t.getTile_size_width());
				item.setTile_type(t.getTile_type());
				find = true;
				this.exportFile();
				break;
			}
			
		}
		if(!find) {
			return true;
		} else {
			//Tawng so luong trong kho
			return false;
		}
	}

	@Override
	public boolean delTile(Tile t) {
		// TODO Auto-generated method stub
		boolean find = false;
		for(Tile item: this.list) {
			if(item.getProduct_id() == t.getProduct_id()) {
				
				this.list.remove(item);
				find = true;
				this.exportFile();
				break;
			}
		}
		return find;
	}

	@Override
	public List<Tile> searchTileByName(String name) {
		// TODO Auto-generated method stub
		List<Tile> results = new ArrayList<Tile>();
		for(Tile item: this.list) {
			if(item.getProduct_name().contains(name)) {
				results.add(item);
			}
			
		}
		return results;
	}

	

	@Override
	public List<Tile> searchTileByPrice(double price) {
		// TODO Auto-generated method stub
		List<Tile> results = new ArrayList<Tile>();
		for(Tile item: this.list) {
			if(item.isProduct_price()== price) {
				results.add(item);
			}
			
		}
		return results;
	}
	
	@Override
	public List<Tile> searchTileByBrand(String brand) {
		// TODO Auto-generated method stub
		List<Tile> results = new ArrayList<Tile>();
		for(Tile item: this.list) {
			if(item.getTile_brand().contains(brand)) {
				results.add(item);
			}
			
		}
		return results;
	}
	
	@Override
	public List<Tile> sortedTileByPrice(boolean isASC) {
		// TODO Auto-generated method stub
//		List<Tile> results = new ArrayList<Tile>();
		
		this.list.sort(Comparator.comparing(Tile::isProduct_price));
		if(!isASC) {
			Collections.reverse(list);
		}
		return null;
	}

	
	@Override
	public List<Tile> sortedTileByBrand(boolean isASC) {
		// TODO Auto-generated method stub
		this.list.sort(Comparator.comparing(Tile::getTile_brand));
		if(!isASC) {
			Collections.reverse(list);
		}
		return null;
	}
	@Override
	public List<Tile> sortedTileByType(boolean isASC) {
		// TODO Auto-generated method stub
		this.list.sort(Comparator.comparing(Tile::getTile_type));
		if(!isASC) {
			Collections.reverse(list);
		}
		return null;
	}
	
	
	public void printInfor() {
		this.list.forEach(go -> {
			System.out.println(go.toString());
			
		});
	}
	
	public void exportFile() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(list);
            oos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	
	@SuppressWarnings("unchecked")
	public void loadData() {
        try {
        	createFile();
        	FileInputStream fi = new FileInputStream(FILE_NAME);
        	ObjectInputStream ois = new ObjectInputStream(fi);
            list = (List<Tile>) ois.readObject();
            ois.close();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
	
	private void createFile() {
		File f = new File(FILE_NAME);
    	if(!f.exists()) {
    		list = new ArrayList<Tile>();
    		exportFile();
    	}
	}

	
	
//	public static void main(String[] args) {
//		TileManagerImpl test = new TileManagerImpl();
//		Tile t1 = new Tile(1,"A",300000,10,"Viglacia","Xương bán sứ",80,80);
//		Tile t2 = new Tile(2,"B",200000,20,"Aiglacia","Men",90,80);
//		Tile t3 = new Tile(3,"C",100000,30,"Ciglacia","Đá hoa",90,90);
//		Tile t4 = new Tile(4,"D",500000,40,"Kiglacia","Vân đá",70,70);
//		Tile t5 = new Tile(5,"E",600000,50,"Biglacia","Vân Gỗ",60,80);
//		Tile t6 = new Tile(6,"A",400000,30,"Figlacia","Vân hoa",60,80);
//		Tile t7 = new Tile(7,"A",400000,30,"Viglacia","Màu hoa",60,80);
//		Tile t8 = new Tile(5,"X",100000,15,"Diglacia","Sọc đá",70,80);
//		test.list.add(t1);
//		test.list.add(t2);
//		test.list.add(t3);
//		test.list.add(t4);
//		test.list.add(t5);
//		test.list.add(t6);
//		
//		test.printInfor();
//		System.out.println("\n-----------------\n");
//		TileManagerImpl test2 = new TileManagerImpl();
//		test2.list = test.searchTileByName("A");
//		test2.printInfor();
//		System.out.println("\n-----------------\n");
//		test.delTile(t6);
//		test.printInfor();
//		test.addTile(t7);
//		System.out.println("\n-----------------\n");
//		test.printInfor();
//		test.editTile(t8);
//		test.delTile(t8);
//		System.out.println("\n-----------------\n");
//		test.printInfor();
//		TileManagerImpl test3 = new TileManagerImpl();
//		test3.list = test.searchTileBy(100000);
//		System.out.println("\n-----------------\n");
//		test3.printInfor();
//		test.sortedTileByBrand(true);
//		System.out.println("\n-----------------\n");
//		test.printInfor();
//	}
	
	
}



