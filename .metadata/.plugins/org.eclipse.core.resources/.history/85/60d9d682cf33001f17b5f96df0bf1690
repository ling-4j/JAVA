package Javaswing;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class HousingManagerGUI extends JFrame {
    private HousingManager manager;
    private DefaultTableModel tableModel;
    private JTable table;

    public HousingManagerUI() {
        manager = new HousingManager();
        setTitle("Housing Manager");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new BorderLayout());
        getContentPane().add(panel);

        tableModel = new DefaultTableModel(new Object[]{"ID", "Name", "Price"}, 0);
        table = new JTable(tableModel);
        loadTable();

        panel.add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel inputPanel = new JPanel();
        JTextField idField = new JTextField(5);
        JTextField nameField = new JTextField(15);
        JTextField priceField = new JTextField(10);
        inputPanel.add(new JLabel("ID:"));
        inputPanel.add(idField);
        inputPanel.add(new JLabel("Name:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Price:"));
        inputPanel.add(priceField);

        JButton addButton = new JButton("Add");
        JButton editButton = new JButton("Edit");
        JButton deleteButton = new JButton("Delete");
        JButton searchButton = new JButton("Search");
        JButton sortAscButton = new JButton("Sort Asc");
        JButton sortDescButton = new JButton("Sort Desc");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(sortAscButton);
        buttonPanel.add(sortDescButton);

        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int id = Integer.parseInt(idField.getText());
                String name = nameField.getText();
                double price = Double.parseDouble(priceField.getText());
                Housing housing = new Housing(id, name, price);
                manager.addX(housing);
                loadTable();
            }
        });

        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int id = Integer.parseInt(idField.getText());
                String name = nameField.getText();
                double price = Double.parseDouble(priceField.getText());
                Housing housing = new Housing(id, name, price);
                manager.editX(housing);
                loadTable();
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int id = Integer.parseInt(idField.getText());
                Housing housing = new Housing(id, null, 0);
                manager.delX(housing);
                loadTable();
            }
        });

        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String query = nameField.getText();
                List<Housing> result = manager.searchX(query);
                loadTable(result);
            }
        });

        sortAscButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Housing> result;
                result = manager.sortedX(true);
                loadTable(result);
            }
        });

        sortDescButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Housing> result = manager.sortedX(false);
                loadTable(result);
            }
        });
    }

    private void loadTable() {
        loadTable(manager.searchX(""));
    }

    private void loadTable(List<Housing> housings) {
        tableModel.setRowCount(0);
        for (Housing h : housings) {
            tableModel.addRow(new Object[]{h.getProductId(), h.getProductName(), h.getProductPrice()});
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new HousingManagerUI().setVisible(true);
            }
        });
    }
}
